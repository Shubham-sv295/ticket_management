##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

module Twilio
  module REST
    class Messaging < Domain
      class V1 < Version
        class ServiceContext < InstanceContext
          ##
          # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
          class UsAppToPersonList < ListResource
            ##
            # Initialize the UsAppToPersonList
            # @param [Version] version Version that contains the resource
            # @param [String] messaging_service_sid The SID of the {Messaging
            #   Service}[https://www.twilio.com/docs/messaging/services/api] that the resource
            #   is associated with.
            # @return [UsAppToPersonList] UsAppToPersonList
            def initialize(version, messaging_service_sid: nil)
              super(version)

              # Path Solution
              @solution = {messaging_service_sid: messaging_service_sid}
              @uri = "/Services/#{@solution[:messaging_service_sid]}/Compliance/Usa2p"
            end

            ##
            # Create the UsAppToPersonInstance
            # @param [String] brand_registration_sid A2P Brand Registration SID
            # @param [String] description A short description of what this SMS campaign does.
            # @param [Array[String]] message_samples Message samples, up to 5 sample messages,
            #   <=1024 chars each.
            # @param [String] us_app_to_person_usecase A2P Campaign Use Case. Examples: [ 2FA,
            #   EMERGENCY, MARKETING..]
            # @param [Boolean] has_embedded_links Indicates that this SMS campaign will send
            #   messages that contain links.
            # @param [Boolean] has_embedded_phone Indicates that this SMS campaign will send
            #   messages that contain phone numbers.
            # @return [UsAppToPersonInstance] Created UsAppToPersonInstance
            def create(brand_registration_sid: nil, description: nil, message_samples: nil, us_app_to_person_usecase: nil, has_embedded_links: nil, has_embedded_phone: nil)
              data = Twilio::Values.of({
                  'BrandRegistrationSid' => brand_registration_sid,
                  'Description' => description,
                  'MessageSamples' => Twilio.serialize_list(message_samples) { |e| e },
                  'UsAppToPersonUsecase' => us_app_to_person_usecase,
                  'HasEmbeddedLinks' => has_embedded_links,
                  'HasEmbeddedPhone' => has_embedded_phone,
              })

              payload = @version.create('POST', @uri, data: data)

              UsAppToPersonInstance.new(
                  @version,
                  payload,
                  messaging_service_sid: @solution[:messaging_service_sid],
              )
            end

            ##
            # Delete the UsAppToPersonInstance
            # @return [Boolean] true if delete succeeds, false otherwise
            def delete
               @version.delete('DELETE', @uri)
            end

            ##
            # Fetch the UsAppToPersonInstance
            # @return [UsAppToPersonInstance] Fetched UsAppToPersonInstance
            def fetch
              payload = @version.fetch('GET', @uri)

              UsAppToPersonInstance.new(
                  @version,
                  payload,
                  messaging_service_sid: @solution[:messaging_service_sid],
              )
            end

            ##
            # Provide a user friendly representation
            def to_s
              '#<Twilio.Messaging.V1.UsAppToPersonList>'
            end
          end

          ##
          # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
          class UsAppToPersonPage < Page
            ##
            # Initialize the UsAppToPersonPage
            # @param [Version] version Version that contains the resource
            # @param [Response] response Response from the API
            # @param [Hash] solution Path solution for the resource
            # @return [UsAppToPersonPage] UsAppToPersonPage
            def initialize(version, response, solution)
              super(version, response)

              # Path Solution
              @solution = solution
            end

            ##
            # Build an instance of UsAppToPersonInstance
            # @param [Hash] payload Payload response from the API
            # @return [UsAppToPersonInstance] UsAppToPersonInstance
            def get_instance(payload)
              UsAppToPersonInstance.new(
                  @version,
                  payload,
                  messaging_service_sid: @solution[:messaging_service_sid],
              )
            end

            ##
            # Provide a user friendly representation
            def to_s
              '<Twilio.Messaging.V1.UsAppToPersonPage>'
            end
          end

          ##
          # PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
          class UsAppToPersonInstance < InstanceResource
            ##
            # Initialize the UsAppToPersonInstance
            # @param [Version] version Version that contains the resource
            # @param [Hash] payload payload that contains response from Twilio
            # @param [String] messaging_service_sid The SID of the {Messaging
            #   Service}[https://www.twilio.com/docs/messaging/services/api] that the resource
            #   is associated with.
            # @return [UsAppToPersonInstance] UsAppToPersonInstance
            def initialize(version, payload, messaging_service_sid: nil)
              super(version)

              # Marshaled Properties
              @properties = {
                  'account_sid' => payload['account_sid'],
                  'brand_registration_sid' => payload['brand_registration_sid'],
                  'messaging_service_sid' => payload['messaging_service_sid'],
                  'description' => payload['description'],
                  'message_samples' => payload['message_samples'],
                  'us_app_to_person_usecase' => payload['us_app_to_person_usecase'],
                  'has_embedded_links' => payload['has_embedded_links'],
                  'has_embedded_phone' => payload['has_embedded_phone'],
                  'status' => payload['status'],
                  'campaign_id' => payload['campaign_id'],
                  'is_externally_registered' => payload['is_externally_registered'],
                  'rate_limits' => payload['rate_limits'],
                  'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                  'date_updated' => Twilio.deserialize_iso8601_datetime(payload['date_updated']),
                  'url' => payload['url'],
              }
            end

            ##
            # @return [String] The SID of the Account that created the resource
            def account_sid
              @properties['account_sid']
            end

            ##
            # @return [String] A2P Brand Registration SID
            def brand_registration_sid
              @properties['brand_registration_sid']
            end

            ##
            # @return [String] The SID of the Messaging Service the resource is associated with
            def messaging_service_sid
              @properties['messaging_service_sid']
            end

            ##
            # @return [String] A short description of what this SMS campaign does
            def description
              @properties['description']
            end

            ##
            # @return [Array[String]] Message samples
            def message_samples
              @properties['message_samples']
            end

            ##
            # @return [String] A2P Campaign Use Case.
            def us_app_to_person_usecase
              @properties['us_app_to_person_usecase']
            end

            ##
            # @return [Boolean] Indicate that this SMS campaign will send messages that contain links
            def has_embedded_links
              @properties['has_embedded_links']
            end

            ##
            # @return [Boolean] Indicates that this SMS campaign will send messages that contain phone numbers
            def has_embedded_phone
              @properties['has_embedded_phone']
            end

            ##
            # @return [String] Campaign status
            def status
              @properties['status']
            end

            ##
            # @return [String] The Campaign Registry (TCR) Campaign ID.
            def campaign_id
              @properties['campaign_id']
            end

            ##
            # @return [Boolean] Indicates whether the campaign was registered externally or not
            def is_externally_registered
              @properties['is_externally_registered']
            end

            ##
            # @return [Hash] Rate limit and/or classification set by each carrier
            def rate_limits
              @properties['rate_limits']
            end

            ##
            # @return [Time] The ISO 8601 date and time in GMT when the resource was created
            def date_created
              @properties['date_created']
            end

            ##
            # @return [Time] The ISO 8601 date and time in GMT when the resource was last updated
            def date_updated
              @properties['date_updated']
            end

            ##
            # @return [String] The absolute URL of the US App to Person resource
            def url
              @properties['url']
            end

            ##
            # Provide a user friendly representation
            def to_s
              "<Twilio.Messaging.V1.UsAppToPersonInstance>"
            end

            ##
            # Provide a detailed, user friendly representation
            def inspect
              "<Twilio.Messaging.V1.UsAppToPersonInstance>"
            end
          end
        end
      end
    end
  end
end